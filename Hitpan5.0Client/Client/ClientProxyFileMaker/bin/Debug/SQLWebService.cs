//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.17929
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ISQLWebService")]
public interface ISQLWebService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLWebService/GetData", ReplyAction="http://tempuri.org/ISQLWebService/GetDataResponse")]
    string GetData(string AuthKey, string query, string serviceURL);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLWebService/GetData", ReplyAction="http://tempuri.org/ISQLWebService/GetDataResponse")]
    System.Threading.Tasks.Task<string> GetDataAsync(string AuthKey, string query, string serviceURL);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLWebService/GetSQLPlan", ReplyAction="http://tempuri.org/ISQLWebService/GetSQLPlanResponse")]
    string GetSQLPlan(string query, string serviceURL);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLWebService/GetSQLPlan", ReplyAction="http://tempuri.org/ISQLWebService/GetSQLPlanResponse")]
    System.Threading.Tasks.Task<string> GetSQLPlanAsync(string query, string serviceURL);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLWebService/GetTime", ReplyAction="http://tempuri.org/ISQLWebService/GetTimeResponse")]
    System.DateTime GetTime();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISQLWebService/GetTime", ReplyAction="http://tempuri.org/ISQLWebService/GetTimeResponse")]
    System.Threading.Tasks.Task<System.DateTime> GetTimeAsync();
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISQLWebService/RegistQuery")]
    void RegistQuery(string AuthKey, string query, string serviceURL);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISQLWebService/RegistQuery")]
    System.Threading.Tasks.Task RegistQueryAsync(string AuthKey, string query, string serviceURL);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISQLWebService/RegistQueryBlock")]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
    void RegistQueryBlock(string AuthKey, object[] QueryBlock, string serviceURL);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISQLWebService/RegistQueryBlock")]
    System.Threading.Tasks.Task RegistQueryBlockAsync(string AuthKey, object[] QueryBlock, string serviceURL);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ISQLWebServiceChannel : ISQLWebService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class SQLWebServiceClient : System.ServiceModel.ClientBase<ISQLWebService>, ISQLWebService
{
    
    public SQLWebServiceClient()
    {
    }
    
    public SQLWebServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public SQLWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public SQLWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public SQLWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string GetData(string AuthKey, string query, string serviceURL)
    {
        return base.Channel.GetData(AuthKey, query, serviceURL);
    }
    
    public System.Threading.Tasks.Task<string> GetDataAsync(string AuthKey, string query, string serviceURL)
    {
        return base.Channel.GetDataAsync(AuthKey, query, serviceURL);
    }
    
    public string GetSQLPlan(string query, string serviceURL)
    {
        return base.Channel.GetSQLPlan(query, serviceURL);
    }
    
    public System.Threading.Tasks.Task<string> GetSQLPlanAsync(string query, string serviceURL)
    {
        return base.Channel.GetSQLPlanAsync(query, serviceURL);
    }
    
    public System.DateTime GetTime()
    {
        return base.Channel.GetTime();
    }
    
    public System.Threading.Tasks.Task<System.DateTime> GetTimeAsync()
    {
        return base.Channel.GetTimeAsync();
    }
    
    public void RegistQuery(string AuthKey, string query, string serviceURL)
    {
        base.Channel.RegistQuery(AuthKey, query, serviceURL);
    }
    
    public System.Threading.Tasks.Task RegistQueryAsync(string AuthKey, string query, string serviceURL)
    {
        return base.Channel.RegistQueryAsync(AuthKey, query, serviceURL);
    }
    
    public void RegistQueryBlock(string AuthKey, object[] QueryBlock, string serviceURL)
    {
        base.Channel.RegistQueryBlock(AuthKey, QueryBlock, serviceURL);
    }
    
    public System.Threading.Tasks.Task RegistQueryBlockAsync(string AuthKey, object[] QueryBlock, string serviceURL)
    {
        return base.Channel.RegistQueryBlockAsync(AuthKey, QueryBlock, serviceURL);
    }
}
